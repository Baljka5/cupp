# Generated by Django 2.1.7 on 2024-02-07 15:20

import cupp.point.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('point', '0041_auto_20240124_1407'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='StorePlanning',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_id', models.IntegerField(blank=True, max_length=5, null=True, verbose_name='Store ID')),
                ('store_name', models.CharField(blank=True, max_length=500, null=True, verbose_name='Store name')),
                ('lat', models.CharField(default='47.9116', max_length=50, verbose_name='Latitude')),
                ('lon', models.CharField(default='106.9057', max_length=50, verbose_name='Longitude')),
                ('grade', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C')], default='A', max_length=10, null=True, verbose_name='Location grade')),
                ('size', models.IntegerField(blank=True, default=0, null=True, verbose_name='Size')),
                ('owner_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Landlord name')),
                ('owner_phone', models.CharField(blank=True, max_length=50, null=True, verbose_name='Landlord phone')),
                ('owner_email', models.CharField(blank=True, max_length=50, null=True, verbose_name='Landlord email')),
                ('base_rent_rate', models.IntegerField(blank=True, default=0, null=True, verbose_name='Base rent')),
                ('proposed_layout', models.FileField(blank=True, null=True, upload_to=cupp.point.models.upload_file, verbose_name='Proposed layout')),
                ('availability', models.BooleanField(blank=True, null=True, verbose_name='Availability')),
                ('deposit', models.IntegerField(blank=True, default=0, null=True, verbose_name='Deposit')),
                ('bep', models.IntegerField(blank=True, default=0, null=True, verbose_name='Breakeven point')),
                ('expected_sales', models.IntegerField(blank=True, default=0, null=True, verbose_name='Expected daily sales')),
                ('passers', models.IntegerField(blank=True, default=0, null=True, verbose_name='Average passers an hour')),
                ('hh', models.IntegerField(blank=True, default=0, null=True, verbose_name='Households in the direct area')),
                ('office', models.IntegerField(blank=True, default=0, null=True, verbose_name='Office people in the direct area')),
                ('students', models.IntegerField(blank=True, default=0, null=True, verbose_name='School/University students in the direct area')),
                ('available_date', models.DateField(blank=True, null=True, verbose_name='Available date')),
                ('isr_file', models.FileField(blank=True, null=True, upload_to=cupp.point.models.upload_file, verbose_name='ISR excel file')),
                ('max_rent_rate', models.IntegerField(blank=True, default=0, null=True, verbose_name='Maximum rent')),
                ('pl_file', models.FileField(blank=True, null=True, upload_to=cupp.point.models.upload_file, verbose_name='P&L excel file')),
                ('radius', models.IntegerField(blank=True, default=0, null=True, verbose_name='Radius by meter /limit 1km/')),
                ('turnover_rent_percent', models.IntegerField(blank=True, default=0, null=True, verbose_name='Turnover rent percentage')),
                ('address', models.CharField(default='', max_length=200, verbose_name='Address')),
                ('cluster', models.CharField(blank=True, max_length=500, null=True, verbose_name='Cluster')),
                ('address_det', models.CharField(blank=True, default='', max_length=500, verbose_name='Address detail')),
                ('sp_name', models.CharField(blank=True, default='', max_length=50, verbose_name='SP name')),
                ('near_gs_cvs', models.IntegerField(blank=True, default=0, null=True, verbose_name='GS25 number')),
                ('near_school', models.IntegerField(blank=True, default=0, null=True, verbose_name='School number')),
                ('park_slot', models.IntegerField(blank=True, default=0, verbose_name='Park number')),
                ('floor', models.IntegerField(blank=True, default=0, verbose_name='Floor number')),
                ('cont_st_dt', models.DateField(blank=True, null=True, verbose_name='Rent agreement start date')),
                ('cont_ed_dt', models.DateField(blank=True, null=True, verbose_name='Rent agreement end date')),
                ('zip_code', models.CharField(blank=True, default='', max_length=100, verbose_name='Zip code')),
                ('rent_tp', models.BooleanField(blank=True, null=True, verbose_name='Type of rent agreement')),
                ('rent_near', models.CharField(blank=True, default='', max_length=50, verbose_name='Company name')),
                ('adv', models.CharField(blank=True, default='', max_length=100, verbose_name='Advantage')),
                ('disadv', models.CharField(blank=True, default='', max_length=100, verbose_name='Disadvantage')),
                ('propose', models.CharField(blank=True, default='', max_length=100, verbose_name='Suggestions for improvement')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('addr1_prov', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='point.City', verbose_name='City and Aimag')),
                ('addr2_dist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='point.District', verbose_name='District and Sum')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='store_planning_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='store_planning_modified', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
            ],
            options={
                'verbose_name': 'Store Planning',
                'db_table': 'store_planning',
            },
        ),
    ]
